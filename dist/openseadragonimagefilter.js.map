{"version":3,"sources":["imagefilters.js"],"names":[],"mappingsfile":"openseadragonimagefilter.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonImagefilters requires OpenSeadragon version 2.0.0+');\n    }\n\n    //@todo add check for imagefiltersplugin\n\n    $.Viewer.prototype.imagefilters = function (options) {\n        if (!this.imageFilters || options) {\n            options = options || {};\n            options.viewer = this;\n            this.imageFilters = new $.ImagefilterTools(options);\n        }\n        return this.imageFilterInstance;\n    };\n\n\n    /**\n     * @class ImagefilterTools\n     * @classdesc Provides functionality for displaing imagefilters as rangesliders\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     */\n    $.ImagefilterTools = function (options) {\n        $.extend(true, this, {\n            // internal state properties\n            viewer: null,\n            buttonActiveImg: false,\n\n            // options\n            showControl: true,\n            startOpen: true,\n            element: null,\n            toggleButton: null,\n            prefixUrl: null,\n            toolsWidth: 180,\n            toolsHeight: 200,\n            class: null,\n            navImages: {\n                imagetools: {\n                    REST: 'selection_rest.png',\n                    GROUP: 'selection_grouphover.png',\n                    HOVER: 'selection_hover.png',\n                    DOWN: 'selection_pressed.png'\n                }\n            },\n            filters: {\n                brightness: {\n                    min: -100,\n                    max: 100,\n                    processor: function() {\n                        var setTo = $.getElement('osd-filter-brightness').value;\n                        return function (context, callback) {\n                            Caman(context.canvas, function () {\n                                this.brightness(parseInt(setTo));\n                                this.render(callback);\n                            });\n                        };\n                    }\n                },\n                contrast:{\n                    min: -100,\n                    max: 100,\n                    processor: function() {\n                        var setTo = $.getElement('osd-filter-contrast').value;\n                        console.log(setTo);\n                        return function (context, callback) {\n                            Caman(context.canvas, function () {\n                                this.contrast(parseInt(setTo));\n                                this.render(callback);\n                            });\n                        };\n                    }\n                },\n                saturation:{\n                    min: -100,\n                    max: 100,\n                    processor: function() {\n                        var setTo = $.getElement('osd-filter-saturation').value;\n                        return function (context, callback) {\n                            Caman(context.canvas, function () {\n                                this.saturation(parseInt(setTo));\n                                this.render(callback);\n                            });\n                        };\n                    }\n                },\n                hue: {\n                    min: 0,\n                    max: 100,\n                    processor: function() {\n                        var setTo = $.getElement('osd-filter-hue').value;\n                        return function (context, callback) {\n                            Caman(context.canvas, function () {\n                                this.hue(parseInt(setTo));\n                                this.render(callback);\n                            });\n                        };\n                    }\n                }\n            }\n        }, options);\n\n        $.extend(true, this.navImages, this.viewer.navImages);\n\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\n\n        if (this.showControl) {\n            this.toggleButton = new $.Button({\n                element: this.toggleButton ? $.getElement(this.toggleButton) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip: $.getString('Tooltips.ImageTools') || 'Image tools',\n                srcRest: prefix + this.navImages.imagetools.REST,\n                srcGroup: prefix + this.navImages.imagetools.GROUP,\n                srcHover: prefix + this.navImages.imagetools.HOVER,\n                srcDown: prefix + this.navImages.imagetools.DOWN,\n                onRelease: this.openTools.bind(this)\n            });\n\n            if (useGroup) { //what does this do?\n                this.viewer.buttons.buttons.push(this.toggleButton);\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\n            }\n            if (this.toggleButton.imgDown) { //what does this do?\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n\n        //should disbale caman cache to prevent memory leak\n        Caman.Store.put = function() {};\n\n    };\n\n    $.extend($.ImagefilterTools.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n\n        openTools: function () {\n\n            //check if tools popup exists and if not create based on filters\n            var popup = $.getElement('osd-imagetools');\n            if (!popup) {\n                var rect = this.toggleButton.element.getBoundingClientRect();\n                var width = this.toolsWidth;\n                var height = this.toolsHeight;\n\n                var popupTop = rect.top - height - 10;\n                var popupLeft = (rect.left + (rect.width / 2)) - (width / 2);\n\n                //if popup is outside view render it below\n                if (popupTop < 0) {\n                    popupTop = rect.bottom + 10;\n                }\n\n                popup = new Element('div');\n                popup.id = 'osd-imagetools';\n                if(this.class){\n                    popup.class = this.class;\n                } else {\n                    popup.style = \"display: none; text-align:center; position:absolute;\" +\n                        \"border: 1px solid black; \" +\n                        \"background-color: white; \" +\n                        \"width: \" + width + \"px; \" +\n                        \"height: \" + height + \"px; \" +\n                        \"top: \" + popupTop + \"px; \" +\n                        \"left: \" + popupLeft + \"px;\";\n                }\n\n                document.body.appendChild(popup);\n\n                for (var f in this.filters) {\n\n                    var filter = this.filters[f];\n\n                    //new input element\n                    var filterElement = new Element('input');\n                    filterElement.type = \"range\";\n                    filterElement.min = filter.min;\n                    filterElement.max = filter.max;\n                    filterElement.step = filter.step || 1;\n                    filterElement.value = filter.value || 0;\n                    filterElement.id = \"osd-filter-\" + f;\n                    filterElement.functionName = f;\n\n                    //add event to slider\n                    this.onRangeChange(filterElement);\n                    //add to tools popup with label\n                    var label = new Element('p');\n                    label.style = \"margin:0;\";\n                    label.innerHTML = $.getString('Tool.' + f) || f;\n\n                    popup.appendChild(label);\n                    popup.appendChild(filterElement);\n                }\n\n                //add reset button\n                var resetButton = new Element('button');\n                resetButton.innerHTML = $.getString('Tool.reset') || 'reset';\n                resetButton.style = \"display:block; margin: 0 auto; padding: 2px;\";\n\n                //add functionality to reset button\n                resetButton.addEventListener('click', function () {this.resetFilters()}.bind(this));\n                popup.appendChild(resetButton);\n            }\n\n            toggleVisablity(popup);\n        },\n\n        updateFilters: function () {\n            var filters = [];\n\n            for (var f in this.filters) {\n                 filters.push(this.filters[f].processor());\n            }\n\n            this.viewer.setFilterOptions({\n                filters: {\n                    processors: filters\n                },\n                loadMode: 'async'\n            });\n        },\n\n        resetFilters: function () {\n            for (var f in this.filters) {\n                var filterInput = $.getElement(\"osd-filter-\" + f);\n                filterInput.value = this.filters[f].value || 0;\n            }\n            this.updateFilters();\n        },\n\n        /**\n         * Copied from http://stackoverflow.com/questions/18544890/onchange-event-on-input-type-range-is-not-triggering-in-firefox-while-dragging/37623959#37623959\n         * @param rangeInputElmt\n         * @param listener\n         */\n        onRangeChange: function (rangeInputElmt, callback) {\n\n            var inputEvtHasNeverFired = true;\n            var rangeValue = {current: undefined, mostRecent: undefined};\n\n            var functionName = rangeInputElmt.functionName;\n\n            rangeInputElmt.addEventListener(\"input\", function (evt) {\n                inputEvtHasNeverFired = false;\n                rangeValue.current = evt.target.value;\n                if (rangeValue.current !== rangeValue.mostRecent) {\n                    this.updateFilters();\n                }\n                rangeValue.mostRecent = rangeValue.current;\n            }.bind(this));\n\n            rangeInputElmt.addEventListener(\"change\", function (evt) {\n                if (inputEvtHasNeverFired) {\n                    this.updateFilters();\n                 }\n            }.bind(this));\n        }\n    });\n\n    function toggleVisablity(element) {\n        var isShown = element.currentStyle ? element.currentStyle.display : getComputedStyle(element, null).display;\n        if (isShown != 'none') {\n            element.style.display = 'none';\n        } else {\n            element.style.display = 'block';\n        }\n    }\n\n\n})(OpenSeadragon);\n"],"sourceRoot":"/source/"}